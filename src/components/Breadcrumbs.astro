---
interface BreadcrumbItem {
  label: string;
  href: string;
}

interface Props {
  items: BreadcrumbItem[];
}

const { items } = Astro.props;
---

<nav class="breadcrumbs" aria-label="Breadcrumb">
  {
    items.map((item, index) => (
      <span class={index === items.length - 1 ? "last-item" : ""}>
        {index > 0 && (
          <span
            class={
              index === items.length - 1 ? "separator hidden" : "separator"
            }
          >
            /
          </span>
        )}
        {index < items.length - 1 ? (
          <a href={item.href} class="link">
            {item.label}
          </a>
        ) : (
          <a href="#title" class="link current-page hidden">
            {item.label}
          </a>
        )}
      </span>
    ))
  }
</nav>

<script>
  const lastBreadcrumb = document.querySelector(".breadcrumbs .current-page");
  const lastSeparator = document.querySelector(
    ".breadcrumbs .last-item .separator"
  );
  const titleElement = document.getElementById("title");
  const header = document.querySelector("nav.header");

  function getHeaderHeight() {
      return header ? header.offsetHeight : 0;
  }

  function handleScroll() {
    if (titleElement) {
      const rect = titleElement.getBoundingClientRect();
        const headerHeight = getHeaderHeight();

      // Show separator when title's top is out of view
      if (rect.top < headerHeight) {
        lastSeparator?.classList.remove("hidden");
      } else {
        lastSeparator?.classList.add("hidden");
      }

      // Show last breadcrumb when title's bottom is out of view
      if (rect.bottom < headerHeight) {
        lastBreadcrumb?.classList.remove("hidden");
      } else {
        lastBreadcrumb?.classList.add("hidden");
      }
    }
  }

  window.addEventListener("scroll", handleScroll);

  const currentPageLink = document.querySelector(".breadcrumbs .current-page");
  currentPageLink?.addEventListener("click", (e) => {
    e.preventDefault();

    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  });
</script>

<style>
  .separator,
  .current-page {
    opacity: 1;
    visibility: visible;
    transition:
      opacity 0.3s ease,
      visibility 0.3s ease;
    overflow: hidden;
    display: inline;
    height: auto;
  }

  .separator.hidden,
  .current-page.hidden {
    opacity: 0;
    visibility: hidden;
    display: block;
    height: 0;
  }
</style>
